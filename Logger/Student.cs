/*
 * Define book, student, and employee records - all with entity capabilities. ❌✔
Choose a thoughtful approach for the value of Name for each type of entity. In all cases, there should be no backing field for Name (not even one generated by an automatically implemented property) - consider a calculated property. ❌✔
Provide a comment on each interface member in each entity explaining why you implemented it implicitly or explicitly. ❌✔
You should consider the relationship between Student and Employee and refactor the common code shared between them. ❌✔
Given the properties on the full name record, you should consider which entities it makes sense to use it. ❌✔
Test that the equality behavior on these entities behaves as expected. ❌✔
Provide a comment on each interface method explaining why you implemented it implicitly or explicitly.
 */

namespace Logger;

public record class Student : Person
{

    //GPA is implemented implicitely because it does not cause collision 
    // since it is not derived from the base class
    public double GPA { get; set; }

    // Student Name is explicit because it can cause collision
    public Student(FullName name, double gpa) : base(name) 
    {
        GPA = gpa;
    }
}